---
networks:
  dspacenet:
    external: true
  proxy:
    external: true

services:
  # DSpace (backend) webapp container
  dspace:
    container_name: dspace
    environment:
      # Below syntax may look odd, but it is how to override dspace.cfg settings via env variables.
      # See https://github.com/DSpace/DSpace/blob/main/dspace/config/config-definition.xml
      # __P__ => "." (e.g. dspace__P__dir => dspace.dir)
      # __D__ => "-" (e.g. google__D__metadata => google-metadata)
      # dspace.dir, dspace.server.url, dspace.ui.url and dspace.name
      dspace__P__dir: /dspace
      dspace__P__server__P__url: https://${HOSTNAME_API}/server
      dspace__P__ui__P__url: https://${HOSTNAME_UI}
      dspace__P__name: 'DSpace Started with Docker Compose'
      # db.url: Ensure we are using the 'dspacedb' image for our database
      db__P__url: 'jdbc:postgresql://dspacedb:5432/dspace'
      # solr.server: Ensure we are using the 'dspacesolr' image for Solr
      solr__P__server: http://dspacesolr:8983/solr
      # proxies.trusted.ipranges: This setting is required for a REST API running in Docker to trust requests 
      # from the host machine. This IP range MUST correspond to the 'dspacenet' subnet defined above.
      # proxies__P__trusted__P__ipranges: '172.24.0'
      handle__P__prefix: 10598
      db__P__cleanDisabled: 'true'
      db__P__password: ${DSPACE_DB_PASSWORD}
    image: dspace/dspace:${DSPACE_VERSION}
    labels:
      - traefik.enable=true
      - traefik.docker.network=${PROXY_NETWORK}

      - traefik.http.routers.${CLIENTNAME}-${SITENAME}-http-rest.entrypoints=${HTTP_ENTRYPOINT}
      - traefik.http.routers.${CLIENTNAME}-${SITENAME}-http-rest.rule=Host(`${HOSTNAME_API}`)
      - traefik.http.routers.${CLIENTNAME}-${SITENAME}-https.entrypoints=${HTTPS_ENTRYPOINT}
      - traefik.http.routers.${CLIENTNAME}-${SITENAME}-https-rest.rule=Host(`${HOSTNAME_API}`)
      - traefik.http.routers.${CLIENTNAME}-${SITENAME}-https-rest.tls=true
      - traefik.http.routers.${CLIENTNAME}-${SITENAME}-https-rest.tls.certresolver=${CERTRESOLVER}

      - traefik.http.services.${CLIENTNAME}-${SITENAME}-https-rest.loadbalancer.server.port=8080
    depends_on:
    - dspacedb
    networks:
      dspacenet:
      proxy:
    #ports:
    #  - "8080:8080"
    stdin_open: true
    tty: true
    volumes:
      - ${DATA_FOLDER}/assetstore:/dspace/assetstore
      # Mount DSpace's solr configs to a volume, so that we can share to 'dspacesolr' container (see below)
      - solr_configs:/dspace/solr
      # Ensure that the database is ready BEFORE starting tomcat
      # 1. While a TCP connection to dspacedb port 5432 is not available, continue to sleep
      # 2. Then, run database migration to init database tables
      # 3. Finally, start Tomcat
    entrypoint:
      - /bin/bash
      - '-c'
      - |
        while (!</dev/tcp/dspacedb/5432) > /dev/null 2>&1; do sleep 1; done;
        /dspace/bin/dspace database migrate
        java -jar /dspace/webapps/server-boot.jar --dspace.dir=/dspace
  
  # DSpace database container    
  dspacedb:
    container_name: dspacedb
    environment:
      PGDATA: /pgdata
      POSTGRES_PASSWORD: ${DSPACE_DB_PASSWORD}
    image: dspace/dspace-postgres-pgcrypto:${DSPACE_DB_VERSION}
    networks:
      dspacenet:
    volumes:
      - ${DATA_FOLDER}/pgdata:/pgdata
  
  # DSpace Solr container  
  dspacesolr:
    container_name: dspacesolr
    # Uses official Solr image at https://hub.docker.com/_/solr/
    image: dspace/dspace-solr:${DSPACE_SOLR_VERSION}
    # Needs main 'dspace' container to start first to guarantee access to solr_configs
    depends_on:
      - dspace
    networks:
      dspacenet:
    #ports:
    #  - "8983:8983"
    working_dir: /var/solr/data
    volumes:
      # Mount our "solr_configs" volume available under the Solr's configsets folder (in a 'dspace' subfolder)
      # This copies the Solr configs from main 'dspace' container into 'dspacesolr' via that volume
      - solr_configs:/opt/solr/server/solr/configsets/dspace
      # Keep Solr data directory between reboots
      - solr_data:/var/solr/data
      # Initialize all DSpace Solr cores using the mounted local configsets (see above), then start Solr
      # * First, run precreate-core to create the core (if it doesn't yet exist). If exists already, this is a no-op
      # * Second, copy updated configs from mounted configsets to this core. If it already existed, this updates core
      #   to the latest configs. If it's a newly created core, this is a no-op.
    entrypoint:
      - /bin/bash
      - '-c'
      - |
        init-var-solr
        precreate-core authority /opt/solr/server/solr/configsets/dspace/authority
        cp -r -u /opt/solr/server/solr/configsets/dspace/authority/* authority
        precreate-core oai /opt/solr/server/solr/configsets/dspace/oai
        cp -r -u /opt/solr/server/solr/configsets/dspace/oai/* oai
        precreate-core search /opt/solr/server/solr/configsets/dspace/search
        cp -r -u /opt/solr/server/solr/configsets/dspace/search/* search
        precreate-core statistics /opt/solr/server/solr/configsets/dspace/statistics
        cp -r -u /opt/solr/server/solr/configsets/dspace/statistics/* statistics
        exec solr -f

volumes:
  solr_data:
  solr_configs:
    external: true
